{"version":3,"sources":["component/Header.js","component/Form.js","component/CustomError.js","component/Weather.js","component/App.js","serviceWorker.js","index.js"],"names":["Header","props","title","react_default","a","createElement","className","Form","cityRef","React","createRef","countryRef","searchWeather","e","preventDefault","citySearched","_this","current","value","countrySearched","weatherResponse","weatherSearched","currentTarget","reset","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","CustomError","message","Weather","showResults","weather","name","weatherIcon","icon","iconURL","concat","alt","main","temp","toFixed","src","temp_min","temp_max","App","state","error","weatherResult","getCityFromOpenWeather","_this$state$weather","url","fetch","then","response","json","dataFromResponse","setState","catch","console","log","prevProps","prevState","snapshot","responseError","cod","result","component_CustomError","component_Weather","component_Header","component_Form","Boolean","window","location","hostname","match","ReactDOM","render","component_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90a813a5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from \"prop-types\";\n\nconst Header = (props) => {\n    const title = props.title;\n    return (\n        <div>\n            <nav>\n                <div className=\"nav-wrapper light-blue darken-2\">\n                    <a className=\"brand-logo\"> {title} </a>\n                </div>\n            </nav>\n        </div>\n    )\n};\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n};\n\nexport default Header\n\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nclass Form extends Component{\n    // crear refs\n    cityRef = React.createRef();\n    countryRef = React.createRef();\n\n    searchWeather = (e) => {\n        e.preventDefault();\n\n    //    leer refs\n        const citySearched = this.cityRef.current.value;\n        const countrySearched = this.countryRef.current.value;\n\n        if (citySearched && typeof citySearched !== 'undefined' && countrySearched && typeof countrySearched !== 'undefined'){\n        //    crear el objeto\n            const weatherResponse = {\n                citySearched,\n                countrySearched\n            }\n        //    enviarlo a app\n            this.props.weatherSearched(weatherResponse)\n\n        } else {\n            this.props.weatherSearched(null)\n        }\n\n\n    //    reset form\n        e.currentTarget.reset();\n    };\n\n    render() {\n        return (\n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.searchWeather}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input id=\"ciudad\" type=\"text\" ref={this.cityRef}/>\n                                <label htmlFor=\"ciudad\"> Ciudad: </label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.countryRef}>\n                                    <option value=\"\" defaultValue> Elige un pais </option>\n                                    <option value=\"AR\">Argentina</option>\n                                    <option value=\"ES\">Espa√±a</option>\n                                    <option value=\"UK\">Reino Unido</option>\n                                    <option value=\"CO\">Colombia</option>\n                                    <option value=\"CR\">Costa Rica</option>\n                                    <option value=\"US\">EEUU</option>\n                                    <option value=\"MX\">Mexico</option>\n                                    <option value=\"PE\">Peru</option>\n                                </select>\n                                <label htmlFor=\"pais\"> Pais: </label>\n                            </div>\n                            <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar ....\"/>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nForm.propTypes = {\n    weatherSearched: PropTypes.func.isRequired\n};\nexport default Form;\n","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nconst CustomError = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        { props.message }\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nCustomError.propTypes = {\n    message: PropTypes.string.isRequired\n};\nexport default CustomError\n","import React, {Component} from 'react'\nimport PropTypes from \"prop-types\";\n\nclass Weather extends Component{\n\n    showResults = () => {\n        const weather = this.props.weather;\n        if (weather.name && typeof weather.name !== 'undefined') {\n            const kelvin = 273.15;\n            let weatherIcon = \"\";\n            if (weather.weather[0].icon && typeof weather.weather[0].icon !== 'undefined'){\n                weatherIcon = weather.weather[0].icon\n            } else {\n                weatherIcon = \"01d\"\n            }\n            let iconURL = `https://openweathermap.org/img/w/${weatherIcon}.png`;\n            const alt = `clima de ${weather.name}`\n            return (\n                <div className=\"row\">\n                    <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                        <div className=\"card-panel light-blue align-center\">\n                            <span className=\"white-text\">\n                                <h2> { weather.name } </h2>\n                                <p \n                                    className=\"temperatura\"> La temperatura actual es: { (weather.main.temp - kelvin).toFixed(2) } &deg;C \n                                    <img src={iconURL} alt={alt}/>\n                                </p>\n                                <p className=\"temperatura\"> La temperatura minima esperada: { (weather.main.temp_min - kelvin).toFixed(2) } &deg;C </p>\n                                <p className=\"temperatura\"> La temperatura maxima esperada: { (weather.main.temp_max - kelvin).toFixed(2) } &deg;C </p>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                {this.showResults()}\n            </div>\n        );\n    }\n}\n\nWeather.propTypes = {\n    weather: PropTypes.object.isRequired\n};\nexport default Weather;\n","import React, {Component} from 'react';\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport CustomError from \"./CustomError\";\nimport Weather from \"./Weather\";\n\nclass App extends Component {\n    state = {\n        error: false,\n        weather: {},\n        weatherResult: {}\n    };\n\n    componentDidMount() {\n        this.setState({\n            error: false\n        })\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.weather === this.state.weather){\n\n        } else {\n            this.getCityFromOpenWeather();\n        }\n    }\n\n    getCityFromOpenWeather = () =>{\n        const { citySearched, countrySearched } = this.state.weather;\n        if (!citySearched || !countrySearched) return null;\n        const apiKey = \"099dffafea76d8daba237d2baeb65201\";\n        let url = `https://api.openweathermap.org/data/2.5/weather?q=${citySearched + `,` + countrySearched}&appid=${apiKey}`\n\n        fetch(url)\n            .then(response => {\n                return response.json()\n            })\n            .then(dataFromResponse => {\n                this.setState({\n                    weatherResult : dataFromResponse\n                })\n            })\n            .catch( error => {\n                console.log(\"\", error);\n            })\n    };\n\n    weatherSearched = response => {\n        if (response) {\n            this.setState({\n                error: false,\n                weather: response\n            })\n        } else {\n            this.setState({\n                error: true\n            })\n        }\n    };\n\n    render() {\n\n        const error = this.state.error;\n        const responseError = this.state.weatherResult.cod;\n        let result = '';\n        if (error) {\n            result = <CustomError\n                message={'Todos los campos son obligatorios'}\n            />\n        } else if (responseError === '404'){\n            result = <CustomError\n                message={'Ciudad buscada no encontrada'}\n            />\n        } else {\n            result = <Weather\n                weather={this.state.weatherResult}\n            />\n        }\n        return (\n            <div className=\"App\">\n                <Header\n                    title=\"Weather\"\n                />\n                <Form\n                    weatherSearched={this.weatherSearched}\n                />\n                {result}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}